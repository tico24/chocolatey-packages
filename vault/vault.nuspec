<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>1.6.2</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer, Tim Collins</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
      Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

      A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

      The key features of Vault are:

      * **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
      * **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
      * **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
      * **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
      * **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

      For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
        ## 1.6.2
        ### January 29, 2021

        SECURITY:

        * IP Address Disclosure: We fixed a vulnerability where, under some error
        conditions, Vault would return an error message disclosing internal IP
        addresses. This vulnerability affects Vault and Vault Enterprise and is fixed in
        1.6.2 (CVE-2021-3024).
        * Limited Unauthenticated Remove Peer: As of Vault 1.6, the remove-peer command
        on DR secondaries did not require authentication. This issue impacts the
        stability of HA architecture, as a bad actor could remove all standby
        nodes from a DR
        secondary. This issue affects Vault Enterprise 1.6.0 and 1.6.1, and is fixed in
        1.6.2 (CVE-2021-3282).
        * Mount Path Disclosure: Vault previously returned different HTTP status codes for
        existent and non-existent mount paths. This behavior would allow unauthenticated
        brute force attacks to reveal which paths had valid mounts. This issue affects
        Vault and Vault Enterprise and is fixed in 1.6.2 (CVE-2020-25594).

        CHANGES:

        * go: Update go version to 1.15.7 [GH-10730]

        FEATURES:

        * ui: Adds check for feature flag on application, and updates namespace toolbar on login if present [GH-10588]

        IMPROVEMENTS:

        * core (enterprise): "vault status" command works when a namespace is set. [GH-10725]
        * core: reduce memory used by leases [GH-10726]
        * storage/raft (enterprise): Listing of peers is now allowed on DR secondary
        cluster nodes, as an update operation that takes in DR operation token for
        authenticating the request.

        BUG FIXES:

        * agent: Set namespace for template server in agent. [GH-10757]
        * core: Make the response to an unauthenticated request to sys/internal endpoints consistent regardless of mount existence. [GH-10650]
        * metrics: Protect emitMetrics from panicking during post-seal [GH-10708]
        * secrets/gcp: Fix issue with account and iam_policy roleset WALs not being removed after attempts when GCP project no longer exists [GH-10759]
        * storage/raft (enterprise): Automated snapshots with Azure required specifying
        `azure_blob_environment`, which should have had as a default `AZUREPUBLICCLOUD`.
        * storage/raft (enterprise): Autosnapshots config and storage weren't excluded from
        performance replication, causing conflicts and errors.
        * ui: Fix bug that double encodes secret route when there are spaces in the path and makes you unable to view the version history. [GH-10596]
        * ui: Fix expected response from feature-flags endpoint [GH-10684]

      ## Previous Releases
      For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v1.6.2/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/tico24/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2021</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/68bd9f48bdf960b40c3b1a590c7aac3f0fdfb59f/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
