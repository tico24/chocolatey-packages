<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if ??? doesn?t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <!-- Read this before publishing packages to chocolatey.org: https://github.com/chocolatey/chocolatey/wiki/CreatePackages -->
    <id>vault</id>
    <title>Vault</title>
    <version>1.6.1</version>
    <authors>Mitchell Hashimoto, HashiCorp</authors>
    <owners>James Toyer, Tim Collins</owners>
    <summary>Vault is a tool for securely accessing secrets</summary>
    <description>
      Vault is a tool for securely accessing secrets. A secret is anything that you want to tightly control access to, such as API keys, passwords, certificates, and more. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.

      A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where Vault steps in.

      The key features of Vault are:

      * **Secure Secret Storage**: Arbitrary key/value secrets can be stored in Vault. Vault encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn't enough to access your secrets. Vault can write to disk, [Consul](https://www.consul.io), and more.
      * **Dynamic Secrets**: Vault can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks Vault for credentials, and Vault will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, Vault will also automatically revoke them after the lease is up.
      * **Data Encryption**: Vault can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as SQL without having to design their own encryption methods.
      * **Leasing and Renewal**: All secrets in Vault have a _lease_ associated with it. At the end of the lease, Vault will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.
      * **Revocation**: Vault has built-in support for secret revocation. Vault can revoke not only single secrets, but a tree of secrets, for example all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.

      For more information, see the [introduction section](https://www.vaultproject.io/intro) of the Vault website.
    </description>
    <releaseNotes>
      ## 1.6.1
      ### December 16, 2020

      SECURITY:

      * LDAP Auth Method: We addressed an issue where error messages returned by the
        LDAP auth methold allowed user enumeration GH-10537. This vulnerability affects Vault OSS and Vault 
        Enterprise and is fixed in 1.5.6 and 1.6.1 (CVE-2020-35177).
      * Sentinel EGP: We've fixed incorrect handling of namespace paths to prevent
        users within namespaces from applying Sentinel EGP policies to paths above
        their namespace. This vulnerability affects Vault Enterprise and is fixed in
        1.5.6 and 1.6.1 (CVE-2020-35453).

      IMPROVEMENTS:

      * auth/ldap: Improve consistency in error messages GH-10537
      * core/metrics: Added "vault operator usage" command. GH-10365
      * secrets/gcp: Truncate ServiceAccount display names longer than 100 characters. GH-10558

      BUG FIXES:

      * agent: Only set the namespace if the VAULT_NAMESPACE env var isn't present GH-10556
      * auth/jwt: Fixes `bound_claims` validation for provider-specific group and user info fetching. GH-10546
      * core (enterprise): Vault EGP policies attached to path * were not correctly scoped to the namespace.
      * core: Avoid deadlocks by ensuring that if grabLockOrStop returns stopped=true, the lock will not be held. GH-10456
      * core: Fix client.Clone() to include the address GH-10077
      * core: Fix rate limit resource quota migration from 1.5.x to 1.6.x by ensuring `purgeInterval` and
      `staleAge` are set appropriately. GH-10536
      * core: Make all APIs that report init status consistent, and make them report
      initialized=true when a Raft join is in progress. GH-10498
      * secrets/database/influxdb: Fix issue where not all errors from InfluxDB were being handled GH-10384
      * secrets/database/mysql: Fixes issue where the DisplayName within generated usernames was the incorrect length GH-10433
      * secrets/database: Sanitize `private_key` field when reading database plugin config GH-10416
      * secrets/transit: allow for null string to be used for optional parameters in encrypt and decrypt GH-10386
      * storage/raft (enterprise): The parameter aws_s3_server_kms_key was misnamed and didn't work.  Renamed to aws_s3_kms_key, and make it work so that when provided the given key will be used to encrypt the snapshot using AWS KMS.
      * transform (enterprise): Fix bug tokenization handling metadata on exportable stores
      * transform (enterprise): Fix transform configuration not handling `stores` parameter on the legacy path
      * transform (enterprise): Make expiration timestamps human readable
      * transform (enterprise): Return false for invalid tokens on the validate endpoint rather than returning an HTTP error
      * transform (enterprise): Fix bug where tokenization store changes are persisted but don't take effect
      * ui: Fix bug in Transform secret engine when a new role is added and then removed from a transformation GH-10417
      * ui: Fix footer URL linking to the correct version changelog. GH-10491
      * ui: Fox radio click on secrets and auth list pages. GH-10586

      ## Previous Releases
      For more information on previous releases, check out the changelog on [GitHub](https://github.com/hashicorp/vault/blob/v1.6.1/CHANGELOG.md).
    </releaseNotes>
    <projectUrl>https://www.vaultproject.io/</projectUrl>
    <docsUrl>https://www.vaultproject.io/docs/index.html</docsUrl>
    <bugTrackerUrl>https://github.com/hashicorp/vault/issues</bugTrackerUrl>
    <projectSourceUrl>https://github.com/hashicorp/vault</projectSourceUrl>
    <packageSourceUrl>https://github.com/tico24/chocolatey-packages</packageSourceUrl>
    <tags>vault hashicorp</tags>
    <copyright>HashiCorp 2015-2021</copyright>
    <licenseUrl>https://github.com/hashicorp/vault/blob/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <!-- Important note about https://cdn.rawgit.com: Files are cached permanently after the first request. Use commit URLs when updating the icon. -->
    <iconUrl>https://cdn.rawgit.com/jamestoyer/chocolatey-packages/68bd9f48bdf960b40c3b1a590c7aac3f0fdfb59f/vault/icons/vault.png</iconUrl>
    <!--<dependencies>
      <dependency id="" version="" />
    </dependencies>-->
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
  </files>
</package>
